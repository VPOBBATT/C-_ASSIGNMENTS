/* 1)	Write a console application which will read text files from mentioned file system location. And list subdirectories from mentioned folder 
on file system using System.IO namespace and use DirectoryInfo, Directory, File and FileInfo Classes with all the methods present in these classes. */

FILEIO:

using System;
using System.IO;
namespace FileIODemo
{
    class DirectoryFiles
    {
        public static void Main(string[] args)
        {
            string path = (@"D:\MyDirectory");
            string[] files = Directory.GetFiles(path);
            string[] directories =
            Directory.GetDirectories(path);


            Console.WriteLine("Displaying names of " +
              "files inside {0}\n", path);
            foreach (string file in files)
            {
                string fileNameWithoutExtension =
                  Path.GetFileNameWithoutExtension(file);
                Console.WriteLine(fileNameWithoutExtension);
            }

            Console.WriteLine("\n\nDisplaying names of " +
              "directories inside {0}\n", path);
            foreach (string directory in directories)
            {
                string directoryName = new DirectoryInfo(
                  Path.GetDirectoryName(directory)).Name;
                Console.WriteLine(directoryName);
            }


            Console.Read();
        }
    }

}

STREAM:
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using FileIODemo;

namespace FileIO_Assignment
{
    class Stream
    {

        static void Main(string[] args)
        {
            try
            {
                string text = System.IO.File.ReadAllText(@"D:\MyDirectory\myfiles\MyFile.txt");
                System.Console.WriteLine("Contents of text file = {0} ", text);
                string[] lines = System.IO.File.ReadAllLines(@"D:\MyDirectory\myfiles\MyFile.txt");
                System.Console.WriteLine("Contents of text file2 = ");
                foreach (string line in lines)
                {
                    Console.WriteLine("\t " + line);
                }
                Console.WriteLine("press any key to exit.");
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }
            DirectoryFiles.Main(args);
            System.Console.ReadKey();

        }
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* 2)	Create a simple user interface to accept account related information of a customer.[ Account class from Lab session on Delegates and Events can be used]. Save the 
information about the customers in a file using StreamWriter and retrieve the information using StreamReader */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
namespace StreamReader
{
    public class StreamReaderWriter
    {
        static void Main(string[] args)
        {
            Account account = new Account();
            Console.WriteLine("Deposit......");

            account.Deposit();
            Console.WriteLine("Reading the data from file");
            Console.WriteLine();
            account.ReaderFromFile();

            Console.WriteLine("Withdraw.....");
            account.Withdraw();

            Console.WriteLine("Reading the data from file");
            Console.WriteLine();
            account.ReaderFromFile();
        }
    }
    class Account
    {
        private double balance = 10000;
        String bank = String.Empty;
        String name = String.Empty;
        int account;
        double withdraw, deposit, totalbal;
        String myPath = @"D:\MyNewDir\Test.txt";

        public void Deposit()
        {
            string temp = "";


            StreamWriter writer = new StreamWriter(myPath, true);
            do
            {
                Console.WriteLine("If you want Enter Or Exit Type: y/n ");
                temp = Console.ReadLine().ToLower();

                if (temp != "n")
                {
                    Console.WriteLine("Enter Customer name:");
                    name = Console.ReadLine();
                    writer.WriteLine(name);

                    Console.WriteLine("Enter Account Number  :");
                    account = Convert.ToInt32(Console.ReadLine());
                    writer.WriteLine(account);

                    Console.WriteLine("Enter Deposit Amount :");
                    deposit = Convert.ToDouble(Console.ReadLine());
                    writer.WriteLine(deposit);

                    totalbal = balance + deposit;
                }


            } while (temp != "n");

            writer.Close();
            Console.WriteLine("Customer Name : " + name);
            Console.WriteLine("Account Number: " + account);
            Console.WriteLine("Total Amount After Deposit  : " + totalbal);

        }
        public void Withdraw()
        {
            string temp = "";


            StreamWriter sr = new StreamWriter(myPath, true);

            do
            {

                Console.WriteLine("If you want Enter Or Exit Type: y/n ");
                temp = Console.ReadLine().ToLower();

                if (temp != "n")
                {
                    Console.WriteLine("Enter Customer Name :");
                    name = Console.ReadLine();
                    sr.WriteLine(name);

                    Console.WriteLine("Enter Account Number  :");
                    account = Convert.ToInt32(Console.ReadLine());
                    sr.WriteLine(account);

                    Console.WriteLine("Enter Withdraw Amount :");
                    withdraw = Convert.ToDouble(Console.ReadLine());
                    sr.WriteLine(withdraw);

                    if (withdraw <= balance)
                    {
                        totalbal = balance - withdraw;

                        Console.WriteLine("Customer Name: " + name);
                        Console.WriteLine("Account Number: " + account);
                        Console.WriteLine("Amount after Withdraw : " + totalbal);
                    }
                    else
                        Console.WriteLine("\n\nUnder balance");
                }


            } while (temp != "n");

            sr.Close();

        }
        public void ReaderFromFile()
        {
            StreamReader streamReader = new StreamReader(myPath);

            while (!streamReader.EndOfStream)
            {
                Console.WriteLine(streamReader.ReadLine());
            }

            streamReader.Close();

        }
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* 3)	Make the Employee, MarketingExecutive and Manager class as Serializable created in LitwareLib.dll .*/

SERIALIZATTION:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;

namespace SerializableEx
{
    class serialization
    {
        public static void SerializationData()
        {
            string str = "Welcome to serialization";
            FileStream filestream = new FileStream(@"D:\serialization\serial.cs", FileMode.Create);
            BinaryFormatter binaryobject = new BinaryFormatter();
            binaryobject.Serialize(filestream, str);
            filestream.Close();

        }
        public static void Main(string[] args)
        {
            SerializationData();
            Console.ReadLine();
            Console.WriteLine("serialization successful");
        }
    }
}

SERIALIZATION1:
using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ClassLibrary2;
using static ClassLibrary2.Litware;

namespace File_IO
{

    class Employee
    {
        public int EMPID;
        public string Name;
        public double Salary, GrossSalary, PF, TDS, NetSalary;
        public void employee()
        {
            Console.WriteLine("emter empid");
            EMPID = int.Parse(Console.ReadLine());
            Console.WriteLine("enter name");
            Name = Console.ReadLine();

        }
    }

    class Manager : Employee
    {

        public double PetrolAllowance;
        public double FoodAllowance;
        public double OtherAllowance;
        public void manager()
        {
            Console.WriteLine("enter salary ");
            Salary = double.Parse(Console.ReadLine());
            PetrolAllowance = (8 * Salary) / 100;
            Console.WriteLine("PetrolAllowance allowances:" + PetrolAllowance);
            FoodAllowance = (13 * Salary) / 100;
            Console.WriteLine("food allowances: " + FoodAllowance);
            OtherAllowance = (3 * Salary) / 100;
            Console.WriteLine("other allowances: " + OtherAllowance);
            GrossSalary = Salary + PetrolAllowance + FoodAllowance + OtherAllowance;
            Console.WriteLine("GrossSalry of Manager: " + GrossSalary);
            PF = (10 * Salary) / 100;
            Console.WriteLine("PF of manager: " + PF);
            TDS = (18 * Salary) / 100;
            Console.WriteLine("TDS of manager: " + TDS);
        }
        public void CalculateSalary()
        {
            NetSalary = GrossSalary - (PF + TDS);
            Console.WriteLine("NetSalary: " + NetSalary);
        }


    }
    //[Serializable]
    class MarketingExecutive : Manager
    {
        double KilometerTravel;
        double TourAllowances;
        double TelephoneAllowances;
        public void marketingExecutive()
        {
            Console.WriteLine("enter salary of MarketingExecutive");
            Salary = double.Parse(Console.ReadLine());
            Console.WriteLine("enter kilo meters");
            KilometerTravel = double.Parse(Console.ReadLine());
            TourAllowances = 5 * KilometerTravel;
            Console.WriteLine("TourAllowances allowances: " + TourAllowances);
            TelephoneAllowances = 1000;
            Console.WriteLine("Telephone allowances: " + TelephoneAllowances);
            GrossSalary = Salary + TourAllowances + TelephoneAllowances;
            Console.WriteLine("GrossSalary of marketing executive: " + GrossSalary);
            PF = (10 * Salary) / 100;
            Console.WriteLine("PF of Marketing executive: " + PF);
            TDS = (18 * Salary) / 100;
            Console.WriteLine("TDS of Marketing executive: " + TDS);
            void CalculateSalary()
            {
                NetSalary = GrossSalary - (PF + TDS);
                Console.WriteLine("NetSalary: " + NetSalary);
            }
        }

    }
    //[Serializable]
    class Program
    {
        static void Main(string[] args)
        {

            Employee employee = new Employee();
            Manager M = new Manager();
            MarketingExecutive M1 = new MarketingExecutive();
            employee.employee();
            M.manager();
            M.CalculateSalary();
            M1.marketingExecutive();
            M1.CalculateSalary();
            Library myObject = new Library();
            myObject.displayEmployees();
            Litware.Main(args);

        }
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* 4)	Create a user interface to accept information about Manager(For simplicity accept only employee id , name and basic salary). Serialize the object using Binary 
Serialization and retrieve its information by deserializing the object. */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Runtime.Serialization.Formatters.Binary;
using System.IO;

namespace ConsoleApp1

{

    public class Employee
    {

        public static void Main()
        {
            string myPath = @"D:\Binary\Test.save";

            string mySecondPath = @"D:\Binary\New.txt";

            Console.Write("Enter the salary of an Employee to find Food ,Petrol,Other Allowances :");
            Manager m = new Manager(Convert.ToInt32(Console.ReadLine()));

            m.Foodie();
            m.Petrol();
            m.Others();

            m.GrossSalary();
            m.CalculateSalary();
            m.Mprint();

            DataSerializer ds = new DataSerializer();


            ds.BinarySerialize(m, myPath);
            Console.WriteLine("Test Deserialize");

            FileStream fs = new FileStream(myPath, FileMode.OpenOrCreate);
            BinaryFormatter bs = new BinaryFormatter();
            Manager mm = (Manager)bs.Deserialize(fs);
            Console.WriteLine("Successfully Deserialized And Deserialized The object");
            Console.WriteLine("");
            Console.WriteLine("Manager salary:{0}", mm.CalculateSalary());


            Console.WriteLine("Manager salary {0}:", mm);

            fs.Close();


            Console.Write("Enter the salary of an Employee to find Tele and Tour Allowances:");

            MarketingExecutive me = new MarketingExecutive(Convert.ToDouble(Console.ReadLine()));
            me.Grosssalary();
            me.CalculateSalary();
            me.Mprint();

            /*Desrialized second object*/
            DataSerializer dss = new DataSerializer();


            ds.BinarySerialize(me, mySecondPath);
            Console.WriteLine("Test Deserialize");

            FileStream fss = new FileStream(mySecondPath, FileMode.OpenOrCreate);
            BinaryFormatter bf = new BinaryFormatter();
            MarketingExecutive marketingExecutive = (MarketingExecutive)bf.Deserialize(fss);
            Console.WriteLine("Successfully Deserialized And Deserialized The object");
            Console.WriteLine("");

            Console.WriteLine("MarketingExecutive salary After deserialized:{0}", marketingExecutive.CalculateSalary());

            fss.Close();

        }

    }
    /*Manager class*/
    [Serializable]
    public class Manager
    {
        private double petrol;
        private double food;
        private double others;
        private double sal;
        private double gross;
        private double netSal;
        private double Pf, tds;

        public Manager(double Esalary)
        {
            sal = Esalary;


            //  Console.WriteLine(sal);
        }
        public double Foodie()
        {
            food = sal * 0.13;

            return food;
        }
        public double Petrol()
        {
            petrol = sal * 0.08;
            return petrol;
        }
        public double Others()
        {
            others = sal * 0.03;

            return others;
        }
        public double GrossSalary()
        {
            gross = sal + food + petrol + others;
            return gross;
        }
        public double CalculateSalary()
        {
            Pf = (gross * 0.10);
            tds = (gross * 0.18);
            netSal = gross - (Pf + tds);

            return netSal;

        }

        public void Mprint()
        {
            Console.WriteLine("Emp Petrol Allowances:{0}", petrol);
            Console.WriteLine("Emp Food Allowances:{0}", food);
            Console.WriteLine("Emp Petrol Allowances:{0}", others);
            Console.WriteLine("Emp Gross Salary with Allowances:{0}", gross);
            Console.WriteLine("Emp Net Salary:{0}", netSal);
        }

    }
    /*Marketing Excutive Class*/
    [Serializable]
    public class MarketingExecutive
    {
        private double sal;
        private double km;
        private double tourAllowances;
        private double telephoneAllowances;
        private double netSal, Pf, tds, gross;
        public MarketingExecutive(double Esal)
        {
            this.sal = Esal;
        }
        public double Grosssalary()
        {
            Console.Write("Enter the Total Kilometers Covered:");
            km = Convert.ToDouble(Console.ReadLine());
            tourAllowances = 5 * km;
            telephoneAllowances = 1000;
            gross = sal + tourAllowances + telephoneAllowances;
            Console.WriteLine(gross);
            return gross;
        }

        public double CalculateSalary()
        {
            Pf = (gross * 0.10);
            tds = (gross * 0.18);
            netSal = gross - (Pf + tds);
            // Console.WriteLine("Employee Salary:" + Netsal);
            return netSal;

        }
        public void Mprint()
        {
            Console.WriteLine("Emp Travel Allowances:{0}", tourAllowances);
            Console.WriteLine("Emp Telephone Allowances:{0}", telephoneAllowances);
            Console.WriteLine("Emp Gross salary with  Allowances:{0}", gross);
            Console.WriteLine("Emp Net Salary :{0}", netSal);
        }

    }
    class DataSerializer
    {
        public void BinarySerialize(Object data, string filePath)
        {
            FileStream fileStream;
            BinaryFormatter binaryFormatter = new BinaryFormatter();
            if (File.Exists(filePath))
            {
                File.Delete(filePath);
            }
            fileStream = File.Create(filePath);
            binaryFormatter.Serialize(fileStream, data);
            fileStream.Close();
        }


    }
}


LITWARE:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ClassLibrary2
{
    public class Litware
    {


        public class Employee
        {
            public int EmpNo;
            public string EmpName;
            public double Salary;
            public double HRA;
            public double TA;
            public double DA;
            public double PF;
            public double TDS;
            public double NetSalary;
            public double GrossSalary;




            public void setDataEmployee(int EmpNo, string EmpName, double Salary)
            {
                this.EmpNo = EmpNo;
                this.EmpName = EmpName;
                this.Salary = Salary;

            }
            public int getAutomatically()
            {

                Console.WriteLine("Please enter the Salary:");
                if (Salary >= 5000)
                {
                    if (Salary < 10000)
                    {
                        HRA = (Salary * 15) / 100;
                        TA = (Salary * 10) / 100;
                        DA = (Salary * 20) / 100;
                        Console.WriteLine("HRA:{0}", HRA);
                        Console.WriteLine("TA:{0}", TA);
                        Console.WriteLine("DA:{0}", DA);
                    }
                    else if (Salary < 15000)
                    {
                        HRA = (Salary * 20) / 100;
                        TA = (Salary * 15) / 100;
                        DA = (Salary * 25) / 100;
                        Console.WriteLine("HRA:{0}", HRA);
                        Console.WriteLine("TA:{0}", TA);
                        Console.WriteLine("DA:{0}", DA);
                    }
                    else if (Salary < 20000)
                    {
                        HRA = (Salary * 25) / 100;
                        TA = (Salary * 20) / 100;
                        DA = (Salary * 30) / 100;
                        Console.WriteLine("HRA:{0}", HRA);
                        Console.WriteLine("TA:{0}", TA);
                        Console.WriteLine("DA:{0}", DA);
                    }
                    else if (Salary >= 20000)
                    {
                        HRA = (Salary * 30) / 100;
                        TA = (Salary * 25) / 100;
                        DA = (Salary * 35) / 100;
                        Console.WriteLine("HRA:{0}", HRA);
                        Console.WriteLine("TA:{0}", TA);
                        Console.WriteLine("DA:{0}", DA);
                    }
                    else
                    {
                        HRA = 0;
                        TA = 0;
                        DA = 0;
                        Console.WriteLine("HRA:{0}", HRA);
                        Console.WriteLine("TA:{0}", TA);
                        Console.WriteLine("DA:{0}", DA);
                    }
                }
                else
                {
                    HRA = (Salary * 10) / 100;
                    TA = (Salary * 5) / 100;
                    DA = (Salary * 15) / 100;
                    Console.WriteLine("HRA:{0}", HRA);
                    Console.WriteLine("TA:{0}", TA);
                    Console.WriteLine("DA:{0}", DA);
                }
                return 0;





            }

            public double calculateGrossSalary()
            {
                GrossSalary = Salary + Salary * HRA / 100.0 + Salary * TA / 100.0 + Salary * DA / 100.0;
                Console.WriteLine("GrossSalary:{0}", GrossSalary);
                PF = GrossSalary * 0.1;
                Console.WriteLine("PF:{0}", PF);
                TDS = GrossSalary * 0.18;
                Console.WriteLine("TDS:{0}", TDS);
                NetSalary = GrossSalary - (PF + TDS);
                Console.WriteLine("NetSalary:{0}", NetSalary);
                return GrossSalary;


                // return GrossSalary - (GrossSalary * PF / 100.0 + GrossSalary * TDS / 100.0);
            }
        }


        public class Library
        {

            private List<Employee> employees = new List<Employee>();


            public void addEmployee(Employee emp)
            {
                this.employees.Add(emp);
            }


            public void displayEmployees()
            {
                for (int i = 0; i < employees.Count; i++)
                {
                    Console.WriteLine("ID: {0}", employees[i].EmpNo);
                    Console.WriteLine("Name: {0}", employees[i].EmpName);
                    Console.WriteLine("Salary: {0}", employees[i].Salary);
                    Console.WriteLine("HRA: {0}", employees[i].HRA);
                    Console.WriteLine("TA: {0}", employees[i].TA);
                    Console.WriteLine("DA: {0}", employees[i].DA);
                    Console.WriteLine("PF: {0}", employees[i].PF);
                    Console.WriteLine("TDS: {0}", employees[i].TDS);
                    Console.WriteLine("Net Salary: {0}", employees[i].NetSalary);
                    Console.WriteLine("Gross Salary: {0}", employees[i].GrossSalary);

                    Console.WriteLine("-----------------");


                }
            }
        }




        public static void Main(string[] args)
        {
            try
            {
                Library library = new Library();
                //library.displayEmployees();




                int ch = -1;
                do
                {
                    Console.WriteLine("1. Enter the employee details");
                    Console.WriteLine("2. Display employee");
                    Console.WriteLine("3. Exit\n");
                    Console.Write("Your choice: ");
                    ch = int.Parse(Console.ReadLine());
                    if (ch == 1)
                    {
                        Console.Write("Enter Employee ID: ");
                        int EmpNo = int.Parse(Console.ReadLine());
                        Console.Write("Enter Employee Name: ");
                        string Name = Console.ReadLine();
                        Console.Write("Enter Employee Salary: ");
                        double Salary = double.Parse(Console.ReadLine());

                        Employee emp = new Employee();
                        emp.setDataEmployee(EmpNo, Name, Salary);
                        emp.getAutomatically();
                        emp.calculateGrossSalary();
                        library.addEmployee(emp);
                    }
                    else if (ch == 2)
                    {
                        library.displayEmployees();
                    }
                    else if (ch == 3)
                    {


                    }
                } while (ch != 3);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }








            Console.ReadKey();
        }
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------

